---
const navItems = [
  { href: '/', label: 'Home', icon: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l9-9 9 9M4 10v10a1 1 0 001 1h3m10-11v11a1 1 0 001 1h3m-10 0h4\"></path></svg>` },
  { href: '/projects', label: 'Projects', icon: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7h18M3 12h18M3 17h18\"></path></svg>` },
  { href: '/blog', label: 'Blog', icon: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 20l9-5-9-5-9 5 9 5zm0-10l9-5-9-5-9 5 9 5z\"></path></svg>` },
  { href: '/about', label: 'About', icon: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5.121 17.804A13.937 13.937 0 0112 15c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0z\"></path></svg>` },
  
];

const currentPath = Astro.url.pathname;
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-md border-b border-neutral-800 transition-all duration-300">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center h-16 relative">
      <!-- Logo -->
      <a href="/" class="flex items-center gap-2 group flex-shrink-0">
        <span class="font-fun text-xl text-green-400 font-bold">$</span>
        <span class="font-fun text-xl text-white/90 group-hover:text-white transition-colors">4bd4ll4h</span>
      </a>

      <!-- Desktop Navigation - Perfectly Centered -->
      <div class="hidden md:flex items-center gap-6 absolute left-1/2 transform -translate-x-1/2">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`inline-flex items-center gap-2 text-sm font-medium transition-colors duration-200 hover:text-white ${
              currentPath === item.href
                ? 'text-white'
                : 'text-neutral-400'
            }`}
          >
            <span class="text-neutral-400"> <Fragment set:html={item.icon} /> </span>
            <span>{item.label}</span>
          </a>
        ))}
      </div>

      <!-- Right side - Theme toggle and mobile menu -->
      <div class="flex items-center gap-3 flex-shrink-0 ml-auto">
        <!-- Theme Toggle -->
        <button
          id="theme-toggle"
          class="p-2 rounded-lg bg-neutral-900 hover:bg-neutral-800 transition-colors duration-200"
          aria-label="Toggle theme"
        >
          <svg id="sun-icon" class="w-5 h-5 text-neutral-400 hidden" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
          </svg>
          <svg id="moon-icon" class="w-5 h-5 text-neutral-400" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
        </button>

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-button"
          class="md:hidden p-2 rounded-lg bg-neutral-900 hover:bg-neutral-800 transition-colors duration-200"
          aria-label="Toggle mobile menu"
        >
          <svg class="w-5 h-5 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden hidden">
      <div class="px-2 pt-2 pb-3 space-y-1 border-t border-neutral-800">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`flex items-center gap-2 px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 hover:text-white ${
              currentPath === item.href
                ? 'text-white bg-neutral-900'
                : 'text-neutral-400 hover:bg-neutral-900'
            }`}
          >
            <span class="text-neutral-400"> <Fragment set:html={item.icon} /> </span>
            <span>{item.label}</span>
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const sunIcon = document.getElementById('sun-icon');
  const moonIcon = document.getElementById('moon-icon');
  
  function updateThemeIcons() {
    const isDark = document.documentElement.classList.contains('dark');
    sunIcon?.classList.toggle('hidden', isDark);
    moonIcon?.classList.toggle('hidden', !isDark);
  }
  
  themeToggle?.addEventListener('click', () => {
    window.dispatchEvent(new CustomEvent('theme-change'));
    updateThemeIcons();
  });
  
  updateThemeIcons();
  
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });
  const mobileLinks = mobileMenu?.querySelectorAll('a');
  mobileLinks?.forEach(link => {
    link?.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
    });
  });
</script>
